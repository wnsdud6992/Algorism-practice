--1로 만들기-- 정수 n을 3또는 2로 나누던지 1을 빼서 최소한의 횟수로 1만들기
도움없이 풀어낸 난이도 중의 동적계획법.
동적계획법 문제를 풀때 최종값부터 거꾸로 나아가며 어떻게 최종값이 만들어 지는지를 작게 나눠서 해결
동적계획법은 대부분 dp[]라는 전역 변수를 설정하여 이미 계산한 값을 저장해 놓는 방식(메모이제이션을 사용)
모든 경우를 다뤄 그 값을 배열에 저장하지만 저장했놨기에 상위계산시 하위값들을 꺼낼 써서 시간을 단축.

#include<stdio.h>
int dp[1000000];                 //main함수 안에선 백만이상의 크기의 배열 오류. 전역변수로 선언시 동작.
int Min(int a, int b) {
	return a > b ? b : a;
}

int main() {
	int i,n;
	scanf("%d", &n);
	dp[1] = 0;
	dp[2] = 1;
	dp[3] = 1;
	for (i = 4; i <= n; i++) {                          //각 항이 2로 나눈 경우 3으로 나눈 경우 1을 뺀 경우 모두를 계산해보고 경로의 최소값을 구한다.
		if (i % 2 == 0 && i % 3 == 0) {
			dp[i] = 1 + Min(Min(dp[i - 1], dp[i / 2]), dp[i / 3]);
		}
		else if (i % 2 == 0 && i % 3 != 0) {
			dp[i] = 1 + Min(dp[i - 1], dp[i / 2]);
		}
		else if (i % 2 != 0 && i % 3 == 0) {
			dp[i] = 1 + Min(dp[i - 1], dp[i / 3]);
		}
		else dp[i] = 1 + dp[i - 1];
		
	}
	printf("%d", dp[n]);
}
