--쉬운계단수-- 양쪽의 숫자가 1씩만 차이나도록하는 n자리 수의 개수 찾기
동적계획법문제의 알고리즘중 상당히 복잡했지만 처음으로 혼자 해결
동적계획법문제는 작은부분에서 알고리즘(점화식)을 찾아 전체를 해결하는 방법을 취해야 한다.


#include <stdio.h>

dp[101][10] = { 0, };

int stair(int n) {
	int num=0,i,j,a;
	
	for (i = 0; i <= 9; i++) {
		dp[1][i] = 1;
	}
	for (i = 2; i <= n; i++) {
		
		dp[i][0] = dp[i - 1][1] % 1000000000;
		dp[i][1] = (dp[i - 1][0] + dp[i - 1][2]) % 1000000000;         //각 항을 백만으로 나눠주는 부분이 없으면 값이 너무 커져 에러가 발생 항상 조심
		dp[i][2] = (dp[i - 1][1] + dp[i - 1][3]) % 1000000000;
		dp[i][3] = (dp[i - 1][2] + dp[i - 1][4]) % 1000000000;
		dp[i][4] = (dp[i - 1][3] + dp[i - 1][5]) % 1000000000;
		dp[i][5] = (dp[i - 1][4] + dp[i - 1][6]) % 1000000000;
		dp[i][6] = (dp[i - 1][5] + dp[i - 1][7]) % 1000000000;
		dp[i][7] = (dp[i - 1][6] + dp[i - 1][8]) % 1000000000;
		dp[i][8] = (dp[i - 1][7] + dp[i - 1][9]) % 1000000000;
		dp[i][9] = (dp[i - 1][8]) % 1000000000;
	}
	
	for (j = 1; j <= 9; j++) {
		num = (num + dp[n][j]) % 1000000000;
	}

	return num%1000000000;
}

int main() {
	int n, a;
	scanf("%d", &n);
	a = stair(n) % 1000000000;
	printf("%d", a);
}
