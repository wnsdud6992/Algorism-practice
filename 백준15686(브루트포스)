--치킨배달--
전형적인 브루트포스 문제라고 볼 수 있다. 
난이도는 별로 높지않은데 문제를 잘 읽어야한다. 문제에서 두 요소의 거리 구하는 방식을 준것은 이를 이용하라는 뜻과 같다.
따라서 문제를 잘 읽어야 한다. nxn크기의 마을에 2가 위치한 치킨집이 존재. m개의 치킨집을 선택해서 1이라는 가정에 배달하는데 최소거리합


from itertools import combinations
import copy
tmp=[]
mini=1000000
one=[]
n,m=map(int,input().split())
arr=[list(map(int,input().split())) for _ in range(n)]
for i in range(n):
    for j in range(n):
        if arr[i][j]==2:
            tmp.append((i,j))
        elif arr[i][j]==1:
            one.append((i,j))
com=list(combinations(tmp,m))

for i in com:
    total=0
    q=[]
    for j in range(len(i)):
        q.append(list(i[j]))
    for a in one:
        num=100000
        for b in q:
            tp=abs(a[0]-b[0])+abs(a[1]-b[1])    #다음과 같이 단순히 abs절대값으로 두 요소간의 거리를 구해서 최소값을 구하면된다.
            num=min(num,tp)
        total+=num
    mini=min(total,mini)
print(mini)

*** bfs가 전부인것 처럼 이용할 필요는 없다. bfs로 구현했다가 시간초과로 문제를 해결하지 못하였다.
즉, 이런 문제와 같이 두 요소간의 거리가 정확히 필요한 경우 직접 구하여서 브루트포스로 구현하는 방식이 시간적으로 훨씬 유리
