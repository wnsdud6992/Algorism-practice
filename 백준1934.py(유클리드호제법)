--최소공배수--
유클리드 호제법을 이용하지 않으면 시간초과가 나는 문제이다.
A=G*a
B=G*b
G가 최대공약수, A*B/G가 최소공배수이다
즉 lcm구하기 위해서 A*B에 최대공약수G를 나누면된다.
최대공약수 G는 유클리드 호제법으로 구한다. 
A,B가 주어졌을 때 A/B한 나머지가 0이 아니라면 이 나머지를 B로 나눠본다.
그 나머지가 0이 아니라면 이 나머지를 이전 나머지 값으로 나눈다. 
EX)
1071은 1029로 나누어떨어지지 않기 때문에, 1071을 1029로 나눈 나머지를 구한다. ≫ 42
1029는 42로 나누어떨어지지 않기 때문에, 1029를 42로 나눈 나머지를 구한다. ≫ 21
42는 21로 나누어떨어진다.
이런방식으로 빠르게 최대공약수를 구할 수 있는데 이를 재귀함수로 이용하여 구현한다.
 

def gcd(a,b):
    return gcd(b%a,a) if b%a else a       # b%a나머지가 0이면 a반환 나머지 존재시 gcd재귀
def lcm(a,b):
    return ((a*b)/gcd(a,b))
    
t=int(input())
for i in range(t):
    a,b=map(int,input().split())
    mi=lcm(a,b)
    print(int(mi))


